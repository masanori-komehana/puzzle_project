
================
モジュール構成図
================

以下は本装置のモジュール構成図である。


.. raw:: html

    <script>
        mermaid.initialize({
            theme: 'neutral',
        });
    </script>


.. mermaid::

    graph TD;
    
        subgraph ユーザ入力;
            ボタン入力;
            キーボード入力;
        end
        subgraph 内部処理部;
            入力部;
            gameif[中継器];
            出力部;
        end
        subgraph ゲーム本体;
            pazzlecore[15パズル];
        end
        subgraph 画面表示;
            LEDマトリクス表示;   
            ターミナルテキスト表示;
        end
        ボタン入力-->入力部;
        キーボード入力-->入力部;
        入力部-->gameif;
        pazzlecore-->gameif;
        gameif-->出力部;
        出力部-->LEDマトリクス表示;
        出力部-->ターミナルテキスト表示;
        gameif-->pazzlecore;

------------------------------
それぞれのモジュールについて。
------------------------------

以下ではそれぞれのモジュールについての概要を説明する。詳細はそれぞれのページ参照。


ボタン入力
==========
ボタン入力とは、
回路図におけるSW0~4の部分に相当する。
それぞれのボタンの意味とは以下のとおりである。

* SW0:リセットボタン。ゲーム開始状態に戻す。
* SW1~4:方向ボタン、キーボード入力の上下左右に相当する。

キーボード入力
==============
キーボード入力はターミナルテキスト表示と同様、
テスト用に制作するモジュールで、
主にubutnu18.04上での動作を想定している。
使用するキーは、リセット用の :guilabel:`Esc` キーと
方向用の :guilabel:`←` :guilabel:`↓` :guilabel:`↑` :guilabel:`→` キー
又は :guilabel:`w` :guilabel:`a` :guilabel:`s` :guilabel:`d` キー
を想定している。

入力部
======
``ボタン入力`` や ``キーボード入力`` から来た入力を
``中継器`` に伝えられるように情報を加工する部分。

中継器
======
``入力部`` から来た情報を ``15パズル`` 本体に伝えたり、
``15パズル`` から来た4x4の駒の表示を
出力部に伝えるためのデータ加工を行う部分。

15パズル
========
15パズルの本体の部分。
4x4のボード上に15の駒があり、
リセットの入力がきたら、駒をシャッフルして開始状態にする。

方向の入力が来たら
終了状態でなければ駒を動かす処理を行い、
なおかつ開始状態であればタイマーを開始する。

駒を動かしたあとは判定ををする。
判定の内容はボード上の駒が
想定していたゴール状態であるかを判定し、
そうであれば終了状態に移行する。

終了状態になるとタイマーを止め、
ゲームクリアとタイマーの時間を表示する。

出力部
======
出力部では、 ``中継器`` から来たデータを
32x32のbyte配列に加工する。

byte配列の中ではRGBの情報を管理し、2bit x 3色の 6bitを使用する。
上位2bitは使用しない。


LEDマトリクス表示
=================
systickハンドラで ``出力部`` から来た配列データを
``HUB75`` 規格の信号に変換し、出力する。

ターミナルテキスト表示
======================
ターミナルテキスト表示はキーボード入力と同様、
テスト用に制作するモジュールで、
主にubutnu18.04上での動作を想定している。

``出力部`` から32x32のバイト配列を
``■`` または ``・`` で表示し、
値によってはエスケープシーケンスを用い、色を変える。

